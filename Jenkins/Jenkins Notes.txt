Jenkins is an open source automation tool written in Java with plugins built for 
Continuous Integration purpose. 

Jenkins is used to build and test your software projects continuously making it easier for developers to integrate changes to the project, and making it easier for users to obtain a fresh build.
 It also allows you to continuously deliver 
your software by integrating with a large number of testing and deployment technologies. 


• First, a developer commits the code to the source code repository. Meanwhile, the Jenkins server checks the repository at regular intervals for changes. 
• Soon after a commit occurs, the Jenkins server detects the changes that have occurred in the source code repository. Jenkins will pull those changes and will start preparing a new build. 
• If the build fails, then the concerned team will be notified. 
• If built is successful, then Jenkins deploys the built in the test server. 
• After testing, Jenkins generates a feedback and then notifies the developers about the build and test results. 
• It will continue to check the source code repository for changes made in the source code and the whole process keeps on repeating. 


benefits of Jenkins
--------------------

 • At integration stage, build failures are cached. 
• For each change in the source code an automatic build report notification is generated. 
• To notify developers about build report success or failure, it is integrated with LDAP mail server. 
• Achieves continuous integration agile development and test driven development. 
• With simple steps, maven release project is automated. 
• Easy tracking of bugs at early stage in development environment than production. 


To use Jenkins you require: 
• A source code repository which is accessible, for instance, a Git repository. 
• A working build script, e.g., a Maven script, checked into the repository. 


Steps to set up Jenkins job
--------------------------
 how to create Jenkins job. 

Go to Jenkins top page, select “New Job”, then choose “Build a free-style software project”. 
Now you can tell the elements of this freestyle job: 
• Optional Maven in Eclipse or IntelliJ where your source code resides. 
• Optional triggers to control when Jenkins will perform builds. 
• Some sort of build script that performs the build (ant, maven, shell script, batch file, etc.) where the real work happens. 
• Optional steps to collect information out of the build, such as archiving the artifacts and/or recording javadoc and test results. 
• Optional steps to notify other people/systems with the build result, such as sending e- mails, IMs, updating issue tracker, etc.. 


What you do when you see a broken build for your project in Jenkins? 
There can be multiple answers to this question I will approach this task in the following way: 
I will open the console output for the broken build and try to see if any file changes were missed. If I am unable to find the issue that way, then I will clean and update my local workspace to replicate the problem on my local and try to solve it. 


Jenkins is mainly integrated with the following: 
• Version Control system like GIT,SVN. 
• Build tools like Apache Maven. 
